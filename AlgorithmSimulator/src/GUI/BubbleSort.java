/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Color;
import java.util.Random;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author PRASAD
 */
public class BubbleSort extends javax.swing.JFrame {
    
    // creating an array to sort
    int arr[]=new int[10]; 
    
    //creating a duplicate array to do the checking if sorting is over at halfway
    int arrc[]=new int[10];
    
    //creating reference textfield that needs to be taken to higher position but currently in a lower position
    JTextField txtHighVal;
    
    //creating reference textfield that needs to be taken to lower position but currently in a higher position
    JTextField txtLowVal;
    
    //creating reference textfields to input elements so we can use to populate 
    //and animate by referencing the Textfields rather than directly invoking
    JTextField TextBoxRef[]=new JTextField[10];
    
    
    /**
     * Creates new form main
     */
    public BubbleSort() {
        initComponents();
        pack();
        setLocationRelativeTo(this);
        
        //clearing combobox elements
        this.jComboBox1.removeAllItems();
        
        //adding two items to combobox
        this.jComboBox1.addItem("Ascending");
        this.jComboBox1.addItem("Descending");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    public class Ascending extends Thread {

        @Override
        public void run() 
        {
                //temporary variable to move elements between integer array indexes
                int temp ; 
                
                //temporary variable to move elements between  array indexes
                JTextField txtTemp;
                
                
                for (int pass = 1; pass < 10; pass++) 
                {
                    for (int i = 0; i < 10 - pass; i++) 
                    {
                        //check if next element is lover than current element
                        if (arr[i] > arr[i + 1]) 
                        {
                            
                            //Inform the viewer with a message that elements are going to interchange
                            jTextArea1.setBackground(Color.pink);
                            jTextArea1.setText("(i) > (i+1)\n\tEXCHANGE!");
                            
                            //interchange elements in array
                            temp = arr[i];
                            arr[i] = arr[i + 1];
                            arr[i + 1] = temp;
                            
                            //setting which textbox to go higher and which to go lower
                            txtHighVal=TextBoxRef[i+1];
                            txtLowVal=TextBoxRef[i];
                            
                           
                            //interchange elements in textfields
                            txtTemp=TextBoxRef[i];
                            TextBoxRef[i]=TextBoxRef[i+1];
                            TextBoxRef[i+1]=txtTemp;
                            
                            //create thread of animation instace
                            animationChangeASC t=new animationChangeASC();
                            t.start();
                            try {
                                //wait for the animation changing thread to be finished
                                t.join();
                               
                               
                            } catch (InterruptedException e) {
                                Logger.getLogger(BubbleSort.class.getName()).log(Level.SEVERE, null, e);
                            }
                            
                            jTextArea1.setText("");
                             
                        }
                        else
                        {
                            //Inform the viewer with a message that elements are NOT going to interchange
                            jTextArea1.setBackground(Color.yellow);
                            jTextArea1.setText("(i)<=(i+1)\n\tNO EXCHANGE!");
                            
                            //setting high value and low value textboxes to references
                            txtHighVal=TextBoxRef[i+1];
                            txtLowVal=TextBoxRef[i];
                            
                            //create thread of NON-animation instance
                            animationNotChangeASC t1=new animationNotChangeASC();
                            t1.start();
                            try {
                                //wait for the animation NOT changing thread to be finished
                                t1.join();
                               
                              
                            } catch (InterruptedException ex) {
                                Logger.getLogger(BubbleSort.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            
                            jTextArea1.setText("");
                        }
                    }
                    
                   
                    
                }
                
                //display that sorting is done.
                jTextArea1.setBackground(Color.black);
                jTextArea1.setForeground(Color.white);
                jTextArea1.setText("SORTING DONE!");
            
          
            

        }
        
       
    }
    
    public class Descending extends Thread {

        @Override
        public void run() 
        {
                
                int temp ;
                JTextField txtTemp;
                
                //temporary variable to move elements between integer array indexes
                for (int pass = 1; pass < 10; pass++) 
                {
                    for (int i = 0; i < 10 - pass; i++) 
                    {
                        //check if current element is lower than next element
                        if (arr[i] < arr[i + 1]) 
                        {
                            
                            //Inform the viewer with a message that elements are going to interchange
                            jTextArea1.setBackground(Color.pink);
                            jTextArea1.setText("(i) < (i+1)\n\tEXCHANGE!");
                            
                            //interchange elements
                            temp = arr[i];
                            arr[i] = arr[i + 1];
                            arr[i + 1] = temp;
                            
                             //setting which textbox to go higher and which to go lower
                            txtHighVal=TextBoxRef[i+1];
                            txtLowVal=TextBoxRef[i];
                            
                           
                            //interchange textbox
                            txtTemp=TextBoxRef[i];
                            TextBoxRef[i]=TextBoxRef[i+1];
                            TextBoxRef[i+1]=txtTemp;
                            
                            //creating a animation thread instance
                            animationChangeASC t=new animationChangeASC();
                            t.start();
                            try {
                                //wait for the animation changing thread to be finished
                                t.join();
                               
                               
                            } catch (InterruptedException e) {
                                Logger.getLogger(BubbleSort.class.getName()).log(Level.SEVERE, null, e);
                            }
                            
                            jTextArea1.setText("");
                             
                        }
                        else
                        {
                            
                            //Inform the viewer with a message that elements are not going to interchange
                            jTextArea1.setBackground(Color.yellow);
                            jTextArea1.setText("(i) >= (i+1)\n\tNO EXCHANGE!");
                            
                            //setting which textbox to go higher and which to go lower
                            txtHighVal=TextBoxRef[i+1];
                            txtLowVal=TextBoxRef[i];
                            
                            //creating a non-animation thread instance
                            animationNotChangeASC t1=new animationNotChangeASC();
                            t1.start();
                            try {
                                //wait for the non animation changing thread to be finished
                                t1.join();
                               
                              
                            } catch (InterruptedException ex) {
                                Logger.getLogger(BubbleSort.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            
                            jTextArea1.setText("");
                        }
                    }
                    
                   
                    
                }
            
                //display that sorting is done.
                jTextArea1.setBackground(Color.GREEN);
                jTextArea1.setForeground(Color.white);
                jTextArea1.setText("SORTING DONE!");
            

        }
    }
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        txt0 = new javax.swing.JTextField();
        txt1 = new javax.swing.JTextField();
        txt2 = new javax.swing.JTextField();
        txt3 = new javax.swing.JTextField();
        txt4 = new javax.swing.JTextField();
        txt5 = new javax.swing.JTextField();
        txt6 = new javax.swing.JTextField();
        txt7 = new javax.swing.JTextField();
        txt8 = new javax.swing.JTextField();
        txt9 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Values"));

        jButton1.setText("Start Simulation");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton2.setText("Random");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextField7, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                    .addComponent(jTextField2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField8, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                    .addComponent(jTextField3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(29, 29, 29))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        txt0.setEditable(false);
        txt0.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txt1.setEditable(false);
        txt1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txt2.setEditable(false);
        txt2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txt3.setEditable(false);
        txt3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txt4.setEditable(false);
        txt4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txt5.setEditable(false);
        txt5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txt6.setEditable(false);
        txt6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txt7.setEditable(false);
        txt7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txt8.setEditable(false);
        txt8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txt9.setEditable(false);
        txt9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt0, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt8, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(85, 85, 85)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txt0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(txt2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txt3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(txt4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(txt5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(txt6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(txt7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(txt8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(txt9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Bubble Sort");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //thread class for animation.
    public class animationChangeASC extends Thread
        {
            //storing current down point values
            int downX=txtLowVal.getX();
            int downY=txtLowVal.getY();

            //storing current up point values
            int upX=txtHighVal.getX();
            int upY=txtHighVal.getY();


            public void run()
            {   
                //invoking puase 
                goToSleep(1500);
                //paint textfield in pink color
                txtLowVal.setBackground(Color.pink);
                //invoking puase 
                goToSleep(1500);
                //paint textfield in pink color
                txtHighVal.setBackground(Color.pink);


                int sleep=1500;
                goToSleep(sleep);
                
                //move textboxes
                txtLowVal.setLocation(upX, upY);
                txtHighVal.setLocation(downX, downY);
                goToSleep(sleep);
                
                //change color of the textboxes
                txtLowVal.setBackground(Color.white);
                txtHighVal.setBackground(Color.white);
                jTextArea1.setText("");
                goToSleep(1500);

            }

            //used to sleep the thread for given milieseconds
            public void goToSleep(long a) {
                try {
                    //pausing main the thread for a time that passed as a parameter
                    Thread.sleep(a);
                } catch (InterruptedException e) {
                    Logger.getLogger(BubbleSort.class.getName()).log(Level.SEVERE, null, e);
                }
            }

    }
        
    public class animationNotChangeASC extends Thread
    {
     
        
        public void run()
        {   
            //invoking puase
            goToSleep(1500);
            //change color of the textboxes
            txtLowVal.setBackground(Color.yellow);
            //invoking puase
            goToSleep(1500);
            txtHighVal.setBackground(Color.yellow);
            //invoking puase
            goToSleep(1500);
            //change color of the textboxes
            txtLowVal.setBackground(Color.white);
            txtHighVal.setBackground(Color.white);
            jTextArea1.setText("");
            goToSleep(1500);
        }
        
        //used to sleep the thread for given milieseconds
        public void goToSleep(long a) {
            try {
                //pausing main the thread for a time that passed as a parameter
                Thread.sleep(a);
            } catch (InterruptedException ex) {
                Logger.getLogger(BubbleSort.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }
        
   
        
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
               
                
               
                
                
        //checking if textfields are empty
        if(this.jTextField1.getText().equals("") || this.jTextField2.getText().equals("") || this.jTextField3.getText().equals("") || this.jTextField4.getText().equals("") ||this.jTextField5.getText().equals("") ||this.jTextField6.getText().equals("") ||this.jTextField7.getText().equals("") ||this.jTextField8.getText().equals("")||this.jTextField9.getText().equals("")||this.jTextField10.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null,  "Please Enter 10 integer numbers OR select RANDOM option to generate numbers for you.", "Required Fields Error!", 1);
        }
        else
        {
            //if not empty fill the arrays with inputs
            
            arr[0]=Integer.parseInt(this.jTextField1.getText());
            arr[1]=Integer.parseInt(this.jTextField2.getText());
            arr[2]=Integer.parseInt(this.jTextField3.getText());
            arr[3]=Integer.parseInt(this.jTextField4.getText());
            arr[4]=Integer.parseInt(this.jTextField5.getText());
            arr[5]=Integer.parseInt(this.jTextField6.getText());
            arr[6]=Integer.parseInt(this.jTextField7.getText());
            arr[7]=Integer.parseInt(this.jTextField8.getText());
            arr[8]=Integer.parseInt(this.jTextField9.getText());
            arr[9]=Integer.parseInt(this.jTextField10.getText());
            
            
            arrc[0]=Integer.parseInt(this.jTextField1.getText());
            arrc[1]=Integer.parseInt(this.jTextField2.getText());
            arrc[2]=Integer.parseInt(this.jTextField3.getText());
            arrc[3]=Integer.parseInt(this.jTextField4.getText());
            arrc[4]=Integer.parseInt(this.jTextField5.getText());
            arrc[5]=Integer.parseInt(this.jTextField6.getText());
            arrc[6]=Integer.parseInt(this.jTextField7.getText());
            arrc[7]=Integer.parseInt(this.jTextField8.getText());
            arrc[8]=Integer.parseInt(this.jTextField9.getText());
            arrc[9]=Integer.parseInt(this.jTextField10.getText());
  
           // make references to code created textbox array
                TextBoxRef[0] = txt0;
                TextBoxRef[1] = txt1;
                TextBoxRef[2] = txt2;
                TextBoxRef[3] = txt3;
                TextBoxRef[4] = txt4;
                TextBoxRef[5] = txt5;
                TextBoxRef[6] = txt6;
                TextBoxRef[7] = txt7;
                TextBoxRef[8] = txt8;
                TextBoxRef[9] = txt9;

            
                //load items to textboxes so we can so how it is sorted
                
                for(int i=0;i<10;i++)
                {
                    TextBoxRef[i].setText(Integer.toString(arr[i]));

                }
              
                
              //if ascending mode is selected launch the ASCENDING thread  
              if(this.jComboBox1.getSelectedItem().toString().equals("Ascending"))  
              { 
                Ascending m = new Ascending();
                m.start();
              }
              
              
              //if descending mode is selected launch the DESCENDING thread 
              if(this.jComboBox1.getSelectedItem().toString().equals("Descending"))  
              { 
                Descending m = new Descending();
                m.start();
              }
               
               

        }
 

    }//GEN-LAST:event_jButton1ActionPerformed

    
                    

    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        
        //create random number instance
        Random r=new Random();
        int min=1;
        int max=1000;
        
        //generate random numbers
        int o1 = r.nextInt(1000);
        int o2 = r.nextInt(1000);
        int o3 = r.nextInt(1000);
        int o4 = r.nextInt(1000);
        int o5 = r.nextInt(1000);
        int o6 = r.nextInt(1000);
        int o7 = r.nextInt(1000);
        int o8 = r.nextInt(1000);
        int o9 = r.nextInt(1000);
        int o10 = r.nextInt(1000);
        

        //setting random numbers to text boxes
        this.jTextField1.setText(Integer.toString(o1));
        this.jTextField2.setText(Integer.toString(o2));
        this.jTextField3.setText(Integer.toString(o3));
        this.jTextField4.setText(Integer.toString(o4));
        this.jTextField5.setText(Integer.toString(o5));
        this.jTextField6.setText(Integer.toString(o6));
        this.jTextField7.setText(Integer.toString(o7));
        this.jTextField8.setText(Integer.toString(o8));
        this.jTextField9.setText(Integer.toString(o9));
        this.jTextField10.setText(Integer.toString(o10));
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BubbleSort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BubbleSort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BubbleSort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BubbleSort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BubbleSort().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTextField txt0;
    private javax.swing.JTextField txt1;
    private javax.swing.JTextField txt2;
    private javax.swing.JTextField txt3;
    private javax.swing.JTextField txt4;
    private javax.swing.JTextField txt5;
    private javax.swing.JTextField txt6;
    private javax.swing.JTextField txt7;
    private javax.swing.JTextField txt8;
    private javax.swing.JTextField txt9;
    // End of variables declaration//GEN-END:variables
}
